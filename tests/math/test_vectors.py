#!/usr/bin/env python
# Licensed under a 3-clause BSD style license, see LICENSE.
"""
Tests for the skhep.math.vectors module.
"""

# -----------------------------------------------------------------------------
# Import statements
# -----------------------------------------------------------------------------
import unittest

from skhep.math.vectors import *
from skhep.utils.py23 import *
from skhep.utils.exceptions import *
from math import pi, sqrt


# -----------------------------------------------------------------------------
# Actual tests
# -----------------------------------------------------------------------------
class Test(unittest.TestCase):
    def runTest(self):
        # required for Python 2.6 only
        self.test_vectors_constructors()
        self.test_vectors_operators()
        self.test_vectors_rotations()
        self.test_3Dvectors_properties()
        self.test_lorentz_vectors_properties()
        self.test_containers_properties()

    def test_vectors_constructors(self):
        self.assertRaises(TypeError, Vector3D.fromiterable, 1.)
        self.assertRaises(ValueError, Vector3D.fromiterable, [1.])
        self.assertRaises(ValueError, Vector3D.fromiterable, ['str1','str2','str3'])
        #
        v1 = Vector3D()
        self.assertEqual(str(v1), str((0., 0., 0.)))
        self.assertEqual(repr(v1), "<Vector3D (x=0.0,y=0.0,z=0.0)>")
        self.assertEqual(str(v1), str(Vector3D.origin()))        
        v2 = Vector3D(1.,1.,1.)
        self.assertEqual(str(v2), str((1., 1., 1.)))
        v3 = Vector3D.fromvector(v1)
        self.assertEqual(str(v3), str((0., 0., 0.)))
        v4 = Vector3D.fromiterable([1.0, 1.0, 1.0])
        self.assertEqual(str(v4), str((1., 1., 1.)))
        v5 = Vector3D.fromcylindricalcoords(1., 0., 1.)
        self.assertEqual(v5, Vector3D(1., 0., 1.))
        self.assertEqual(v5.rho, 1.)
        v6 = Vector3D.fromcylindricalcoords(0.5, pi/2, 0.)
        self.assertEqual(v6, Vector3D(0., 0.5, 0.))
        v7 = Vector3D.fromsphericalcoords(1.0, 0., 0.)
        self.assertEqual(v7, Vector3D(0., 0., 1.))
        self.assertEqual(v7.r, 1.)
        self.assertEqual(v7.theta(), 0.)
        v8 = Vector3D.fromsphericalcoords(1.0, 0., pi/2)
        self.assertEqual(v8, Vector3D(0., 0., 1.))
        v9 = Vector3D.fromsphericalcoords(2.0, pi/2, pi/4)
        self.assertEqual(v9, Vector3D(sqrt(2), sqrt(2), 0.))
        v10 = Vector3D.frompoint( 2., 2., 2.)
        self.assertEqual(str(v10), str((2., 2., 2.)))
        #
        self.assertRaises(TypeError, LorentzVector.fromiterable, 1)
        self.assertRaises(ValueError, LorentzVector.fromiterable, [1])
        self.assertRaises(ValueError, LorentzVector.fromiterable, ['str1', 'str2', 'str3', 'str4'])
        #        
        lv1 = LorentzVector()
        self.assertEqual(str(lv1), str((0., 0., 0., 0.)))
        self.assertEqual(repr(lv1), "<LorentzVector (x=0.0,y=0.0,z=0.0,t=0.0)>")
        lv2 = LorentzVector(1., 1., 1., 1.)
        self.assertEqual(str(lv2), str((1., 1., 1., 1.)))
        lv3 = LorentzVector.from4vector(lv1)
        self.assertEqual(str(lv3), str((0., 0., 0., 0.)))
        lv4 = LorentzVector.from3vector(v2, 2.)
        self.assertEqual(str(lv4), str((1., 1., 1., 2.)))
        lv5 = LorentzVector.fromiterable([1., 1., 1., 0.])
        self.assertEqual(str(lv5), str((1., 1., 1., 0.)))
        
    def test_containers_properties(self):
        self.assertRaises(IndexError, Vector3D.__setitem__, Vector3D(), 3, 1.)
        self.assertRaises(IndexError, Vector3D.__getitem__, Vector3D(), 3)
        #
        v1 = Vector3D()
        v1.x = 5.; v1.y = -5.; v1.z = 10
        self.assertEqual(v1, Vector3D(5., -5., 10.))
        v1.set(-5., 5., 10.)
        self.assertEqual(v1, Vector3D(-5., 5., 10.))
        v1[0] = 1.
        self.assertEqual(v1, Vector3D(1., 5., 10.))
        v1[1] = 1.
        self.assertEqual(v1, Vector3D(1., 1., 10.))
        v1[2] = 1.
        self.assertEqual(v1, Vector3D(1., 1., 1.))
        self.assertEqual(v1[0], 1.)
        self.assertEqual(v1[1], 1.)
        self.assertEqual(v1[2], 1.)
        self.assertEqual(len(v1), 3.)
        self.assertEqual(v1.tolist(), [1., 1., 1.])
        self.assertEqual(list(v1), [1., 1., 1.])
        self.assertEqual([v for v in v1], [1., 1., 1.])
        #
        self.assertRaises(IndexError, LorentzVector.__setitem__, LorentzVector(), 4, 1.)
        self.assertRaises(IndexError, LorentzVector.__getitem__, LorentzVector(), 4)
        #
        lv1 = LorentzVector()
        lv1.x = 5.; lv1.y = -5.; lv1.z = 10; lv1.t = 2.
        self.assertEqual(lv1, LorentzVector(5., -5., 10., 2.))
        lv1.px = 5.; lv1.py = 5.; lv1.pz = -10; lv1.e = 2.
        self.assertEqual(lv1, LorentzVector(5., 5., -10., 2.))
        lv1.set(-5., 5., 10., -2.)
        self.assertEqual(lv1, LorentzVector(-5., 5., 10., -2.))
        lv1[0] = 1.
        self.assertEqual(lv1, LorentzVector(1., 5., 10., -2.))
        lv1[1] = 1.
        self.assertEqual(lv1, LorentzVector(1., 1., 10., -2.))
        lv1[2] = 1.
        self.assertEqual(lv1, LorentzVector(1., 1., 1., -2.))
        lv1[3] = 1.
        self.assertEqual(lv1, LorentzVector(1., 1., 1., 1.))
        self.assertEqual(lv1[0], 1.)
        self.assertEqual(lv1[1], 1.)
        self.assertEqual(lv1[2], 1.)
        self.assertEqual(lv1[3], 1.)
        self.assertEqual(len(lv1), 4.)
        self.assertEqual(lv1.tolist(), [1., 1., 1., 1.])
        self.assertEqual(list(lv1), [1., 1., 1., 1.])
        self.assertEqual([v for v in lv1], [1., 1., 1., 1.])
        
    def test_vectors_operators(self):
        self.assertRaises(InvalidOperationError, Vector3D.__iadd__, Vector3D(), "a")
        self.assertRaises(InvalidOperationError, Vector3D.__isub__, Vector3D(), "a")
        self.assertRaises(InvalidOperationError, Vector3D.__imul__, Vector3D(), Vector3D())
        self.assertRaises(ZeroDivisionError, Vector3D.__div__, Vector3D(), 0.0)
        self.assertRaises(InvalidOperationError, Vector3D.__idiv__, Vector3D(), Vector3D())
        self.assertRaises(ZeroDivisionError, Vector3D.__idiv__, Vector3D(), 0.0)
        #
        v1, v2 = Vector3D(0., 0., 0.), Vector3D(1., 1., 1.)
        v3, v4 = Vector3D(2., 2., 2.), Vector3D(3., 3., 3.)
        v5 = Vector3D(1., 2., 3.)
        self.assertEqual(v1, 0.)
        self.assertEqual(v1 + v2, Vector3D(1., 1., 1.))
        self.assertEqual(v1 - v2, Vector3D(-1., -1., -1.))
        self.assertEqual(v1 - v2, -1.*Vector3D(1., 1., 1.))
        self.assertEqual(v1 * 2., Vector3D(0., 0., 0.))
        self.assertEqual(v2 * 2., Vector3D(2., 2., 2.))
        self.assertEqual(2. * v1, Vector3D(0., 0., 0.))
        self.assertEqual(2. * v2, Vector3D(2., 2., 2.))
        self.assertEqual(v1 * v2, 0.)
        self.assertEqual(v2 * v1, 0.)
        self.assertEqual(v3 * v4, v3.dot(v4), "Check commutativity")
        self.assertEqual(v3 * v4, v4.dot(v3), "Check commutativity")
        self.assertEqual(v4 * v3, v3.dot(v4), "Check commutativity")
        self.assertEqual(v4 * v3, v4.dot(v3), "Check commutativity")
        self.assertEqual(v3 * v4, 18.)
        self.assertEqual(v3 / 2., v2)
        self.assertEqual(v4 / 3., v2)
        v1 *= 2.
        v2 *= 2.
        self.assertEqual(v1, Vector3D(0., 0., 0.))
        self.assertEqual(v2, Vector3D(2., 2., 2.))
        v1 /= 2.
        v2 /= 2.
        self.assertEqual(v1, Vector3D(0., 0., 0.))
        self.assertEqual(v2, Vector3D(1., 1., 1.))
        self.assertEqual((v1 + v2) * v3, 6., "Check operations combination")
        self.assertEqual((v2 - v1) * v3, 6., "Check operations combination")
        self.assertEqual(v3 * (v1 - v2), -6., "Check operations combination")
        self.assertEqual(18. / (v3 * v4), 1., "Check operations combination")
        self.assertEqual( v4 / (v3 * v2), Vector3D(0.5, 0.5, 0.5))
        self.assertEqual(v2.cross(v2), Vector3D(0., 0., 0.))
        self.assertEqual(v2.cross(v5), Vector3D(1., -2., 1.))
        self.assertEqual(v5.cross(v2), -1 * v2.cross(v5))
        self.assertTrue(v2 == v2)
        self.assertTrue(v2 != v1)
        self.assertFalse(v2 != v2)
        self.assertFalse(v2 == v1)
        self.assertFalse(v1 == "a")
        self.assertFalse(v1 == 1)
        #
        self.assertRaises(InvalidOperationError, LorentzVector.__iadd__, LorentzVector(), "a")
        self.assertRaises(InvalidOperationError, LorentzVector.__isub__, LorentzVector(), "a")
        self.assertRaises(InvalidOperationError, LorentzVector.__imul__, LorentzVector(), LorentzVector())
        self.assertRaises(ZeroDivisionError, LorentzVector.__div__, LorentzVector(), 0.0)
        self.assertRaises(InvalidOperationError, LorentzVector.__idiv__, LorentzVector(), LorentzVector())
        self.assertRaises(ZeroDivisionError, LorentzVector.__idiv__, LorentzVector(), 0.0)
        #
        lv1, lv2 = LorentzVector(0., 0., 0., 0.), LorentzVector(1., 1., 1., 0.)
        lv3, lv4 = LorentzVector(2., 2., 2., 1.), LorentzVector(3., 3., 3., 1.)
        lv5 = LorentzVector(1., 1., 1., 6.)
        self.assertEqual(lv1, 0.)
        self.assertEqual(lv1 + lv2, LorentzVector(1., 1., 1., 0.))
        self.assertEqual(lv1 - lv2, LorentzVector(-1., -1., -1., 0.))
        self.assertEqual(lv1 * 2., LorentzVector(0., 0., 0., 0.))
        self.assertEqual(lv2 * 2., LorentzVector(2., 2., 2., 0.))
        self.assertEqual(2. * lv1, LorentzVector(0., 0., 0., 0.))
        self.assertEqual(2. * lv2, LorentzVector(2., 2., 2., 0.))
        self.assertEqual(lv2 * lv1, 0.)
        self.assertEqual(lv1 * lv2, 0.)
        self.assertEqual(lv3 * lv4, lv3.dot(lv4))
        self.assertEqual(lv3 * lv4, lv4.dot(lv3))
        self.assertEqual(lv4 * lv3, lv3.dot(lv4))
        self.assertEqual(lv4 * lv3, lv4.dot(lv3))
        self.assertEqual(lv3 * lv4, -17.)
        self.assertEqual(lv3 / 2., LorentzVector(1., 1., 1., 0.5))
        self.assertEqual(lv4 / 3., LorentzVector(1., 1., 1., 1./3))
        self.assertEqual(lv3 * lv5, 0.0)
        lv1 *= 2.
        lv2 *= 2.
        self.assertEqual(lv1, LorentzVector(0., 0., 0., 0.))
        self.assertEqual(lv2, LorentzVector(2., 2., 2., 0.))
        lv1 /= 2.
        lv2 /= 2.
        self.assertEqual(lv1, LorentzVector(0., 0., 0., 0.))
        self.assertEqual(lv2, LorentzVector(1., 1., 1., 0.))
        self.assertTrue(lv2 == lv2)
        self.assertTrue(lv2 != lv1)
        self.assertFalse(lv2 != lv2)
        self.assertFalse(lv2 == lv1)
        self.assertFalse(lv1 == "a")
        self.assertFalse(lv1 == 1)
        
    def test_vectors_rotations(self):
        self.assertRaises(TypeError, Vector3D.rotate, Vector3D(), pi, 1)
        self.assertRaises(TypeError, Vector3D.rotate, Vector3D(), pi, [1,2])
        self.assertRaises(TypeError, Vector3D.rotate, Vector3D(), pi, 1, 2, 3, 4)
        self.assertRaises(ValueError, Vector3D.rotate, Vector3D(), pi, 0, 1, 'a')
        self.assertRaises(ValueError, Vector3D.rotate, Vector3D(), pi, ['a','b',3])
        #
        v1 = Vector3D.fromcylindricalcoords(1., 0., 0.)
        self.assertEqual(v1.phi(), 0.0)
        self.assertEqual(v1.rotatez(pi/2).phi(), pi/2) 
        self.assertEqual(v1.rotatez(pi/2), Vector3D(0., 1., 0.)) 
        self.assertEqual(v1.rotatey(pi).phi(), pi) 
        self.assertEqual(v1.rotatey(-pi).phi(), pi) 
        self.assertEqual(v1.rotatey(pi), Vector3D(-1., 0., 0.))
        self.assertEqual(v1.rotatey(-pi), Vector3D(-1., 0., 0.))
        self.assertEqual(v1.rotatex(pi).phi(), 0.)
        self.assertEqual(v1.rotatex(pi), Vector3D(1., 0., 0.))
        v2 = Vector3D.fromsphericalcoords(1.0, pi/2, pi/2)
        self.assertEqual(v2.phi(), pi/2)
        self.assertEqual(v2.theta(), pi/2)
        self.assertEqual(v2.rotatex(pi).phi(), -pi/2)
        self.assertEqual(v2.rotatex(pi).theta(), pi/2)
        self.assertEqual(v2.rotatex(pi) , Vector3D(0., -1., 0.))
        v3 = Vector3D.fromsphericalcoords(1.0, pi/4, pi/4)
        angle = v2.angle(v3)
        axis = v2.cross(v3)
        self.assertEqual(v2.rotate(angle, axis), v3)
        self.assertEqual(v2.rotate(-angle, -1.*axis), v3)
        #
        self.assertRaises(TypeError, LorentzVector.rotate, LorentzVector(), pi, 1)
        self.assertRaises(TypeError, LorentzVector.rotate, LorentzVector(), pi, [1,2])
        self.assertRaises(TypeError, LorentzVector.rotate, LorentzVector(), pi, 1, 2, 3, 4)
        self.assertRaises(ValueError, LorentzVector.rotate, LorentzVector(), pi, 0, 1, 'a')
        self.assertRaises(ValueError, LorentzVector.rotate, LorentzVector(), pi, ['a','b',3])
        #
        lv1 = LorentzVector.from3vector(v1, 1.)
        self.assertEqual(lv1.phi(), 0.)
        self.assertEqual(lv1.rotatez(pi/2).phi(), pi/2) 
        self.assertEqual(lv1.rotatez(pi/2), LorentzVector(0., 1., 0., 1.)) 
        self.assertEqual(lv1.rotatey(pi).phi(), pi) 
        self.assertEqual(lv1.rotatey(-pi).phi(), pi) 
        self.assertEqual(lv1.rotatey(pi), LorentzVector(-1., 0., 0., 1.))
        self.assertEqual(lv1.rotatey(-pi), LorentzVector(-1., 0., 0., 1.))
        self.assertEqual(lv1.rotatex(pi).phi(), 0.)
        self.assertEqual(lv1.rotatex(pi), LorentzVector(1., 0., 0., 1.))
        lv2 = LorentzVector.from3vector(v2, 2.0)
        self.assertEqual(lv2.phi(), pi/2)
        self.assertEqual(lv2.theta(), pi/2)
        self.assertEqual(lv2.rotatex(pi).phi(), -pi/2)
        self.assertEqual(lv2.rotatex(pi).theta(), pi/2)
        self.assertEqual(lv2.rotatex(pi) , LorentzVector(0., -1., 0., 2.0))
        lv3 = LorentzVector.from3vector(v3, 2.0)
        self.assertEqual(lv2.rotate(angle, axis), lv3)
        self.assertEqual(lv2.rotate(-angle, -1.*axis), lv3)
        
    def test_3Dvectors_properties(self):
        v0 = Vector3D()
        v1, v2 = Vector3D(1., 1., 1.), Vector3D(2., 2., 2.)
        v3, v4 = Vector3D(-1., -1., -1.), Vector3D(-2., -2., -2.)
        v5, v6 = Vector3D(1., 1., 0.), Vector3D(0., 0., 2.)
        self.assertFalse(v0)
        self.assertTrue(v1)
        self.assertEqual(v1.mag2, 3.)
        self.assertEqual(v1.mag, sqrt(3.))
        self.assertEqual(v2.mag2, 12.)
        self.assertEqual(v2.mag, sqrt(12.))
        self.assertEqual(v1.unit().mag, 1.)
        v7 = v1.unit()
        self.assertEqual(v1.unit(), v7.unit())
        self.assertEqual(v1.isparallel(v2), True)
        self.assertEqual(v2.isparallel(v1), True)
        self.assertEqual(v1.isantiparallel(v2), False)
        self.assertEqual(v2.isantiparallel(v1), False)
        self.assertEqual(v1.isantiparallel(v3), True)
        self.assertEqual(v2.isantiparallel(v4), True)
        self.assertEqual(v1.isparallel(v3), False)
        self.assertEqual(v2.isparallel(v4), False)
        self.assertEqual(v1.isopposite(v3), True)
        self.assertEqual(v1.isopposite(v4), False)
        self.assertEqual(v2.isopposite(v4), True)
        self.assertEqual(v2.isopposite(v3), False)
        self.assertEqual(v1.isperpendicular(v2), False)
        self.assertEqual(v2.isperpendicular(v1), False)
        self.assertEqual(v5.isperpendicular(v6), True)
        self.assertEqual(v6.isperpendicular(v5), True)
        
    def test_lorentz_vectors_properties(self):
        self.assertRaises(TypeError, LorentzVector.boost, LorentzVector(), 1)
        self.assertRaises(TypeError, LorentzVector.boost, LorentzVector(), [1,2])
        self.assertRaises(TypeError, LorentzVector.boost, LorentzVector(), 1, 2, 3, 4)
        self.assertRaises(ValueError, LorentzVector.boost, LorentzVector(), 0, 1, 'a')
        self.assertRaises(ValueError, LorentzVector.boost, LorentzVector(), ['a','b',3])
        #
        lv0 = LorentzVector()
        lv1, lv2 = LorentzVector(1., 1., 1., 1.), LorentzVector(1., 1., 1., 2.)
        self.assertEqual(lv1.boostvector, Vector3D(1., 1., 1.))
        self.assertEqual(lv1.beta, sqrt(3.))
        self.assertEqual(lv2.boostvector, Vector3D(0.5, 0.5, 0.5))
        lv3 = LorentzVector(0., 0., 1., 0.)
        beta = 0.05
        gamma = 1/sqrt(1 - beta**2)
        lv4 = lv3.boost(0,0,beta)
        self.assertEqual(lv4.z, lv3.z * gamma, "Check length contraction")
        self.assertEqual(lv4.x, lv3.x)
        self.assertEqual(lv4.y, lv3.x)
        self.assertEqual(lv4.t, gamma * (lv3.t - beta * lv3.z))
        self.assertEqual(lv4, LorentzVector(lv3.x, lv3.y, lv3.z * gamma, gamma * (lv3.t - beta * lv3.z)))
        lv5 = LorentzVector(0., 0., 0., 1.)
        self.assertEqual(lv5.beta, 0.)
        self.assertEqual(lv5.gamma, 1.)
        self.assertEqual(lv5.boost(0,0,0), lv5)
        lv6 = lv5.boost([0,beta,0])
        self.assertEqual(lv6.x, lv5.x)
        self.assertEqual(lv6.z, lv5.z)
        self.assertEqual(lv6.t, lv5.t * gamma, "Check time dilation")
        self.assertEqual(lv6.y, gamma * (lv5.y - beta*lv5.t))
        self.assertEqual(lv6, LorentzVector(lv5.x, gamma * (lv5.y - beta*lv5.t), lv5.z, lv5.t * gamma))
        self.assertEqual(lv1.isspacelike(), True)
        self.assertEqual(lv1.istimelike(), False)
        self.assertEqual(lv1.islightlike(), False)
        self.assertEqual(lv2.isspacelike(), False)
        self.assertEqual(lv2.istimelike(), True)
        self.assertEqual(lv2.islightlike(), False)
        lv7 = LorentzVector(1., 1., 1., sqrt(3.))
        self.assertEqual(lv7.isspacelike(), False)
        self.assertEqual(lv7.istimelike(), False)
        self.assertEqual(lv7.islightlike(), True)
        #
        p1 = LorentzVector()
        p1.setpxpypzm(5.,5.,10.,5)
        self.assertEqual(p1.px, 5.)
        self.assertEqual(p1.py, 5.)
        self.assertEqual(p1.pz, 10.)
        self.assertEqual(p1.m, 5.)
        self.assertEqual(p1.mass, 5.)
        self.assertEqual(p1.m2, 25.)
        self.assertEqual(p1.mass2, 25.)
        self.assertEqual(p1.pt, sqrt(p1.px**2 + p1.py**2))
        self.assertEqual(p1.p, sqrt(p1.px**2 + p1.py**2 + p1.pz**2))
        self.assertEqual(p1.p, sqrt(p1.pt**2 + p1.pz**2))
        self.assertEqual(p1.e, sqrt(p1.m**2 + p1.p**2))
        self.assertEqual(p1.beta, p1.p / p1.e)
        p2 = p1.boost(p1.px/p1.e, p1.y/p1.e, p1.z/p1.e)
        self.assertEqual(p2 , p1.boost(p1.boostvector))
        self.assertEqual(p2.p, 0.)
        self.assertAlmostEqual(p2.m, 5.)
        p3 = LorentzVector()
        p3.setpxpypze(5.,5.,10.,20)
        self.assertEqual(p3.px, 5.)
        self.assertEqual(p3.py, 5.)
        self.assertEqual(p3.pz, 10.)
        self.assertEqual(p3.e, 20.)
        self.assertEqual(p3.m, sqrt(p3.e**2 - p3.p**2))
        self.assertEqual(p3.beta, p3.p / p3.e)
        p4 = LorentzVector()
        p4.setptetaphim(10.,3.5,pi/3,5.)
        self.assertAlmostEqual(p4.pt, 10.)
        self.assertAlmostEqual(p4.eta, 3.5)
        self.assertAlmostEqual(p4.phi(), pi/3)
        self.assertAlmostEqual(p4.m, 5.)
        p5 = LorentzVector()
        p5.setptetaphie(10.,3.9,-2*(pi/3),20.)
        self.assertAlmostEqual(p5.pt, 10.)
        self.assertAlmostEqual(p5.eta, 3.9)
        self.assertAlmostEqual(p5.pseudorapidity, 3.9)
        self.assertAlmostEqual(p5.phi(), -2*(pi/3))
        self.assertAlmostEqual(p5.e, 20.)
        self.assertAlmostEqual(p5.deltaeta(p4), 0.4)
        self.assertAlmostEqual(p4.deltaeta(p5), -0.4)
        self.assertAlmostEqual(p5.deltaphi(p4), -pi)
        self.assertAlmostEqual(p4.deltaphi(p5), pi)
        self.assertAlmostEqual(p5.deltar(p4), sqrt(0.4**2 + pi**2))
        self.assertAlmostEqual(p4.deltar(p5), sqrt(0.4**2 + pi**2))
        p6 = LorentzVector()
        p6.setptetaphie(10.,3.9,-pi,20.)
        self.assertAlmostEqual(p6.deltaphi(p4), 2*(pi/3))
        self.assertAlmostEqual(p4.deltaphi(p6), -2*(pi/3))
        p7 = LorentzVector()
        p7.setpxpypzm(5.,5.,5.,0.)
        self.assertEqual(p7.beta, 1.)
        self.assertEqual(p7.gamma, 10E10, "Gamma of the photons is +inf")
        self.assertEqual(p7.p, p7.e, "Momentum = Energy for photons")
        self.assertEqual(p7.pseudorapidity, p7.rapidity)
        self.assertEqual(p7.pt, p7.et, msg="Transverse Momentum = Transverse Energy for photons")
        self.assertAlmostEqual(p7.pt, p7.mt, msg="Transverse Momentum = Transverse Mass for photons")
        self.assertAlmostEqual(p7.perp2, p7.mt2)
        self.assertEqual(p7.islightlike(), True)
        p8 = p1 + p7
        p9, p10 = p1.boost(p8.boostvector), p7.boost(p8.boostvector)
        self.assertAlmostEqual(p9.p, p10.p, msg="Check boost to the C.O.M frame")
        p3_9, p3_10 = p9.vector, p10.vector
        self.assertEqual(p3_9.isopposite(p3_10), True)
        p8 = LorentzVector()
        p8.setptetaphie(10.,2E2,-2*(pi/3),20.) #sinh(eta) diverge quickly
        self.assertEqual(p8.theta(), 0.0)
        self.assertEqual(p8.eta, 10E10)
